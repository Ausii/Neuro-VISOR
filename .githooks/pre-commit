#!/bin/bash

# could use git rev-parse --abbrev-ref HEAD to get branch name
git show origin/master:ProjectSettings/ProjectVersion.txt > ProjectSettings/LocalProjectVersion.txt

# Unity version
CURRENT_UNITY_PROJECT_VERSION=$(head -n 1 ProjectSettings/ProjectVersion.txt | cut -d ':' -f 2 | tr -d ' ')
LOCAL_UNITY_PROJECT_VERSION=$(head -n 1 ProjectSettings/LocalProjectVersion.txt | cut -d ':' -f 2 | tr -d ' ')

# git lfs version
LOCAL_VER=$(git lfs env| awk -F ' ' 'FNR == 1 {print $1} ' | awk -F '/' '{print $2}')
REQ_VER=2.10.0

vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

RED='\033[0;31m'
BLACK="$(tput sgr0)"

echo "*********************** PRE-COMMIT HOOK *********************************"

if [  "$CURRENT_UNITY_PROJECT_VERSION" = "$LOCAL_UNITY_PROJECT_VERSION" ];  then
   echo -e "Local version and current Unity version are consistent: ${RED} $CURRENT_UNITY_PROJECT_VERSION ${BLACK}."
   echo "*************************************************************************"

    vercomp "$LOCAL_VER" "$REQ_VER"
    case $? in
        0) op='=';;
        1) op='>';;
        2) op='<';;
    esac


    if [[ ! $op != "<" ]]; then
      echo -e "Local git lfs version does not satisfy minimum required version ${RED} $LOCAL_VER ${BLACK}(Have) < ${RED} $REQ_VER ${BLACK} (Required) ${BLACK}."
      echo "*************************************************************************"
      git stash 
      echo "Your changes have been stashed. Use git stash pop to retrieve (uncommited) changes."
      exit 1
    fi 

      echo -e "Local git lfs version does satisfy minimum required version ${RED} $LOCAL_VER ${BLACK}(Have) >= ${RED} $REQ_VER ${BLACK} (Required) ${BLACK}."
    echo "*************************************************************************"

    exit 0
else 
   echo -e "Local Unity project version (${RED}$LOCAL_UNITY_PROJECT_VERSION${BLACK}) differs from"
   echo -e "master branch's Unity project version (${RED}$CURRENT_UNITY_PROJECT_VERSION${BLACK})!"
   git stash
   echo "Your changes have been stashed. Use git stash pop to retrieve (uncommited) changes."
fi
echo "*************************************************************************"

